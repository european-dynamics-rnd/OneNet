package it.eng.idsa.dataapp.web.rest;

import java.net.URISyntaxException;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.fasterxml.jackson.databind.ObjectMapper;

import de.fraunhofer.iais.eis.ArtifactRequestMessage;
import it.eng.idsa.dataapp.domain.ProxyRequest;
import it.eng.idsa.dataapp.model.GetEntityRequest;
import it.eng.idsa.dataapp.service.ProxyService;

@RestController

public class RegistrationEntityController {

	private static final Logger logger = LoggerFactory.getLogger(RegistrationEntityController.class);
	
	private String myBody = null;
	
	@Autowired
	private ProxyService proxyService;
	
	@Value("${application.fiware.contextBroker.provider.url}") 
	private String contextBrokerProviderUrl;

	@Value("${application.fiware.ecc.provider.url}") 
	private String providerURL;

	@Value("${application.fiware.contextpath.orionregistration}") 
	private String contextPathOrionRegistration;
	
	@Value("${application.fiware.contextpath.registration}") 
	private String contextPathRegistrationEntity;
	
	@RequestMapping("/registration/**")
	public ResponseEntity<?> proxyToDataApp(@RequestHeader HttpHeaders httpHeaders,
			@RequestBody(required = false) String body, HttpMethod method, HttpServletRequest request) throws URISyntaxException, Exception {
		logger.info("HTTP Method {}", method.name());
		logger.info("HTTP Headers {}", httpHeaders.entrySet().stream()
				.map(Map.Entry::toString)
				.collect(Collectors.joining(";", "[", "]")));
		
		logger.info("ENG: request.getRequestURI()       {}", request.getRequestURI());
		logger.info("ENG: contextPathOrionRegistration  {}", contextPathOrionRegistration);
		logger.info("ENG: contextPathRegistrationEntity {}", contextPathRegistrationEntity);
		
		//Replace contextPathGetEntity with contextPathOrionProvider
		String myAppo = new String (request.getRequestURI());
		myAppo = myAppo.replace(contextPathRegistrationEntity, contextPathOrionRegistration);
		StringBuilder contextPath = new StringBuilder(myAppo);
		logger.info("ENG: Path {}", contextPath.toString());
		if(StringUtils.isNotBlank(request.getQueryString())) {
			contextPath.append("?")
				.append(request.getQueryString());
		}
		logger.info("payload \n{}", body);
		
		String strEntity = "";
		List<String> myEntity = httpHeaders.getValuesAsList("entity");
		if (myEntity.isEmpty())
			logger.error ("entity IS EMPTY");
		else
			strEntity = myEntity.toString();
		
		String strForwardTo = "";
		List<String> myForwardTo = httpHeaders.getValuesAsList("forward-to");
		if (myForwardTo.isEmpty()) {
			logger.error ("entityId IS EMPTY");
		}
		else
			strForwardTo = myForwardTo.toString();

		String strPCB = "";
		strPCB = httpHeaders.getFirst("provider-context-broker");
		if (strPCB.isEmpty())
			logger.error ("provider-context-broker IS EMPTY");
		
		logger.info ("entity                  {}", myEntity.toString());
		logger.info ("forward-to              {}", myForwardTo.toString());
		logger.info ("provider-context-broker {}", strPCB);

		myBody = "{\"@context\": [\"https://fiware.github.io/data-models/context.jsonld\", \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld\"],";
		myBody = myBody + "\"type\": \"ContextSourceRegistration\",";
		myBody = myBody + "\"information\": [ {\"entities\": [{\"type\": \"Building\", \"id\":\"" + myEntity.toString() + "\"}]}],";
		myBody = myBody + "\"endpoint\": \"http://" + myForwardTo.toString() + "\",";
		myBody = myBody + "\"provider-context-broker\": \"http://" + strPCB + "\",";
		myBody = myBody + "\"title\": \"NOT_FOUND\"}";
		logger.info("ENG: ************************************************************");
		logger.info("ENG: myBody {}", myBody);
		logger.info("ENG: ************************************************************");
		
		body = myBody;
		GetEntityRequest getEntityRequest = new GetEntityRequest(body, method, httpHeaders, contextPath.toString());

		logger.info("ENG: providerURL  {}", providerURL);
		logger.info("ENG: strForwardTo {}", strForwardTo);

		ObjectMapper mapper = new ObjectMapper();
//		ProxyRequest proxyRequest = new ProxyRequest(ProxyRequest.MULTIPART_FORM, 
//				contextBrokerProviderUrl + contextPath, 
//				strForwardTo, 
//				// TODO update logic to pass some ID that will be used for UsageControl as requestedArtifact
//				mapper.writeValueAsString(myBody), 
//				null, 
//				ArtifactRequestMessage.class.getSimpleName(), 
//				null);

		ProxyRequest proxyRequest = new ProxyRequest(ProxyRequest.MULTIPART_FORM, 
				strForwardTo, 
				contextBrokerProviderUrl + contextPath, 
				// TODO update logic to pass some ID that will be used for UsageControl as requestedArtifact
				mapper.writeValueAsString(getEntityRequest), 
				null, 
				ArtifactRequestMessage.class.getSimpleName(), 
				null);

		return proxyService.convertToOrionResponse(proxyService.proxyRegistrationEntityForm(proxyRequest, httpHeaders, contextBrokerProviderUrl + contextPath));
	}
}
